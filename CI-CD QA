-----------------------------------------------------------QA-CI-----------------------------------------------------------------

pipeline {

    agent { label 'java' }
	tools {
        jdk 'jdk7'
    }
    environment{
        PATH = "/tools/maven/apache-maven-3.6.3/bin:$PATH"
		HOME = "${env.WORKSPACE}"
    }
	
    stages {
	
       stage("Interactive_Input") {
            steps {
                script {

                    // Variables for input
                    def inputbranch

                    // Get the input
                    def userInput = input(
                            id: 'userInput', message: 'Enter value below:?',
                            parameters: [

                                    string(defaultValue: 'none',
                                            description: 'enter branch name',
                                            name: 'branch'),

                            ])

                    // Save to variables. Default to empty string if not found.
                       env.inputbranch = userInput?:''

                    // Echo to console
                    echo("BranchID: ${env.inputbranch}")
                }
            }
        }
	
	 stage("Git Checkout"){
		   // agent { label 'java' }
            steps{
                git branch: "${env.inputbranch}", credentialsId: 'git-access', url: 'https://172.16.50.92/anand/soap-ui-projects.git'
            }
        }
	 stage("copy to regression path") {
	      steps {
		     dir("/tools/") {
			     sh "sh /tools/smoke-copy.sh"
			    }
            }    
        }   	 
        stage('Print details'){
           steps{ 
			script{
                sh "echo ${BUILD_TIMESTAMP}"
				}
			}
        }			
	   	
	}
}	

-----------------------------------------------------------QA-CD-----------------------------------------------------------------

pipeline {

    agent any
	tools {
        jdk 'zulu8'
    }
		
    stages {

        stage("Interactive_Input") {
            steps {
                script {

                    // Variables for input
                    def inputgroupid
                    def inputartifactid
					def inputVersion

                    // Get the input
                    def userInput = input(
                            id: 'userInput', message: 'Enter value below:?',
                            parameters: [

                                    string(defaultValue: 'com.smarthub.mpg',
                                            description: 'enter GroupId',
                                            name: 'GroupId'),
                                    string(defaultValue: 'mpg-egypt-service-container',
                                            description: 'enter artifact-id',
                                            name: 'artifactid'),
									string(defaultValue: '4.18.5.0-EGYPT',
                                            description: 'enter Version',
                                            name: 'Version'),
                            ])

                    // Save to variables. Default to empty string if not found.
                    env.inputgroupid = userInput.GroupId?:''
                    env.inputartifactid = userInput.artifactid?:''
					env.inputVersion = userInput.Version?:''

                    // Echo to console
                    echo("GroupID: ${env.inputgroupid}")
                    echo("ArtifactID: ${env.inputartifactid}")
					echo("VersionNumber: ${env.inputVersion}")

                }
            }
        }

	stage('cleanup previous run logs ') {
	    steps {
			dir("/tools/smoke_tests/logs") {
				script {
				    sh 'echo "hello build" >/tools/smoke_tests/logs/ignore.txt'
				    sh 'rm -rf /tools/smoke_tests/logs_bkp/*'
				    sh 'cp -r /tools/smoke_tests/logs/* /tools/smoke_tests/logs_bkp/'
				    sh 'rm -rf /tools/smoke_tests/logs/*'
				}
			}
		}
    }
    
    
    
	stage('run test ') {
	    steps {
	        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
    			dir("/tools/SOAPUI/bin/") {
    				script {
    				    sh 'echo $JAVA_HOME'
//    					sh 'export envPropPath=/tools/SOAP-TESTING/config/qa.properties; ./testrunner.sh "/tools/SOAP-TESTING/Egypt Smoke Automation Script.xml" -f "/tools/SOAP-TESTING/logs"'
                        sh 'export envPropPath=/tools/smoke_tests/config/qa/application.properties; ./testrunner.sh "/tools/smoke_tests/Egypt_Smoke_Automation_Script.xml" -f "/tools/smoke_tests/logs"'
    				}
    			}
	        }	
		}
    }
	
	stage('compress log file and send mail ') {
	    steps {
			dir("/tools/smoke_tests/logs") {
				script {
                    sh 'sh /tools/email.sh'
				}
			}
		}
    }

 }
}
